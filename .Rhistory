df <- df %>%
group_by(!!!group_vars)
dfs <- list(df)
for (var in vars) {
if (is.na(var)) {
df_rollup <- df %>% ungroup()
} else {
df_rollup <- df %>%
group_by_at(setdiff(group_vars_char, as.character(var)))
}
dfs <- append(dfs, list(df_rollup))
}
new("grouped_rollup", df_list = dfs)
}
setGeneric("summarize", function(object, ...) {
standardGeneric("summarize")
})
setMethod("summarize", "grouped_rollup", function(object, ...) {
funcs <- rlang::quos(...)
result_tmp <- lapply(object@df_list, function(x) {
dplyr::summarize(x, !!!funcs)
})
dplyr::bind_rows(result_tmp)
})
group_by_rollup <- function(df, ..., vars) {
group_vars <- enquos(...)
group_vars_char <- purrr::map_chr(group_vars, rlang::quo_text)
df <- df %>%
group_by(!!!group_vars)
dfs <- list(df)
for (var in vars) {
if (is.na(var)) {
df_rollup <- df %>% ungroup()
} else {
df_rollup <- df %>%
group_by_at(setdiff(group_vars_char, as.character(var)))
}
dfs <- append(dfs, list(df_rollup))
}
dfs
}
summarize_rollup <- function(df_list, ...) {
funcs <- rlang::quos(...)
result_tmp <- lapply(df_list, function(x) {
dplyr::summarize(x, !!!funcs)}
)
dplyr::bind_rows(result_tmp)
}
mtcars %>%
group_by_rollup(vs, am, vars = c("vs", "am", NA)) %>%
summarize_rollup(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
# 클래스를 생성합니다.
setClass("grouped_rollup", representation(df_list = "list"))
# group_by_rollup 함수를 수정하여 결과물이 'grouped_rollup' 클래스를 가지도록 합니다.
group_by_rollup <- function(df, ..., vars) {
group_vars <- enquos(...)
group_vars_char <- purrr::map_chr(group_vars, rlang::quo_text)
df <- df %>%
group_by(!!!group_vars)
dfs <- list(df)
for (var in vars) {
if (is.na(var)) {
df_rollup <- df %>% ungroup()
} else {
df_rollup <- df %>%
group_by_at(setdiff(group_vars_char, as.character(var)))
}
dfs <- append(dfs, list(df_rollup))
}
new("grouped_rollup", df_list = dfs)
}
# `summarize` generic을 설정합니다.
setGeneric("summarize",
function(.Object, ...) {
standardGeneric("summarize")
})
# 'grouped_rollup' 클래스에 대한 'summarize' 메소드를 생성합니다.
setMethod("summarize",
signature = "grouped_rollup",
definition = function(.Object, ...) {
funcs <- rlang::quos(...)
result_tmp <- lapply(.Object@df_list, function(x) {
dplyr::summarize(x, !!!funcs)}
)
dplyr::bind_rows(result_tmp)
})
summarize_rollup <- function(df_list, ...) {
funcs <- rlang::quos(...)
result_tmp <- lapply(df_list, function(x) {
dplyr::summarize(x, !!!funcs)}
)
dplyr::bind_rows(result_tmp)
}
mtcars %>%
group_by_rollup(vs, am, vars = c("vs", "am", NA)) %>%
summarize_rollup(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
mtcars %>%
group_by_rollup(vs, am, vars = c("vs", "am", NA)) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
# 클래스를 생성합니다.
setClass("grouped_rollup", representation(df_list = "list"))
# group_by_rollup 함수를 수정하여 결과물이 'grouped_rollup' 클래스를 가지도록 합니다.
group_by_rollup <- function(df, ..., vars) {
group_vars <- enquos(...)
group_vars_char <- purrr::map_chr(group_vars, rlang::quo_text)
df <- df %>%
group_by(!!!group_vars)
dfs <- list(df)
for (var in vars) {
if (is.na(var)) {
df_rollup <- df %>% ungroup()
} else {
df_rollup <- df %>%
group_by_at(setdiff(group_vars_char, as.character(var)))
}
dfs <- append(dfs, list(df_rollup))
}
new("grouped_rollup", df_list = dfs)
}
# `summarize` generic을 설정합니다.
setGeneric("summarize",
function(.Object, ...) {
standardGeneric("summarize")
})
# 'grouped_rollup' 클래스에 대한 'summarize' 메소드를 생성합니다.
setMethod("summarize",
signature = "grouped_rollup",
definition = summarize_rollup
})
# 'grouped_rollup' 클래스에 대한 'summarize' 메소드를 생성합니다.
setMethod("summarize",
signature = "grouped_rollup",
definition = summarize_rollup)
# 'grouped_rollup' 클래스에 대한 'summarize' 메소드를 생성합니다.
setMethod("summarize",
signature = "grouped_rollup",
definition = function(.Object, ...) {
summarize_rollup
})
summarize_rollup <- function(df_list, ...) {
funcs <- rlang::quos(...)
result_tmp <- lapply(df_list, function(x) {
dplyr::summarize(x, !!!funcs)}
)
dplyr::bind_rows(result_tmp)
}
mtcars %>%
group_by_rollup(vs, am, vars = c("vs", "am", NA)) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
mtcars %>%
group_by_rollup(vs, am, vars = c("vs", "am", NA)) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
# 'grouped_rollup' 클래스에 대한 'summarize' 메소드를 생성합니다.
setMethod("summarize",
signature = "grouped_rollup",
definition = function(.Object, ...) {
summarize_rollup(.Object, ...)
})
summarize_rollup <- function(df_list, ...) {
funcs <- rlang::quos(...)
result_tmp <- lapply(df_list, function(x) {
dplyr::summarize(x, !!!funcs)}
)
dplyr::bind_rows(result_tmp)
}
mtcars %>%
group_by_rollup(vs, am, vars = c("vs", "am", NA)) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
# 'grouped_rollup' 클래스에 대한 'summarize' 메소드를 생성합니다.
setMethod("summarize",
signature = "grouped_rollup",
definition = function(.Object, ...) {
funcs <- rlang::quos(...)
result_tmp <- lapply(.Object@df_list, function(x) {
dplyr::summarize(x, !!!funcs)}
)
dplyr::bind_rows(result_tmp)
})
summarize_rollup <- function(df_list, ...) {
funcs <- rlang::quos(...)
result_tmp <- lapply(df_list, function(x) {
dplyr::summarize(x, !!!funcs)}
)
dplyr::bind_rows(result_tmp)
}
mtcars %>%
group_by_rollup(vs, am, vars = c("vs", "am", NA)) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
# 'grouped_rollup' 클래스에 대한 'summarize' 메소드를 생성합니다.
setMethod("summarize",
signature = "grouped_rollup",
definition = function(.Object, ...) {
summarize_rollup(.Object$df_list)
})
summarize_rollup <- function(df_list, ...) {
funcs <- rlang::quos(...)
result_tmp <- lapply(df_list, function(x) {
dplyr::summarize(x, !!!funcs)}
)
dplyr::bind_rows(result_tmp)
}
mtcars %>%
group_by_rollup(vs, am, vars = c("vs", "am", NA)) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
# 'grouped_rollup' 클래스에 대한 'summarize' 메소드를 생성합니다.
setMethod("summarize",
signature = "grouped_rollup",
definition = summarize_rollup(.Object@df_list))
# 'grouped_rollup' 클래스에 대한 'summarize' 메소드를 생성합니다.
setMethod("summarize",
signature = "grouped_rollup",
definition = function(.Object, ...) {
summarize_rollup(.Object$df_list)
})
summarize_rollup <- function(df_list, ...) {
funcs <- rlang::quos(...)
result_tmp <- lapply(df_list, function(x) {
dplyr::summarize(x, !!!funcs)}
)
dplyr::bind_rows(result_tmp)
}
mtcars %>%
group_by_rollup(vs, am, vars = c("vs", "am", NA)) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
summarize_rollup(.Object@df_list)
# 'grouped_rollup' 클래스에 대한 'summarize' 메소드를 생성합니다.
setMethod("summarize",
signature = "grouped_rollup",
definition = function(.Object, ...) {
summarize_rollup(.Object@df_list)
})
summarize_rollup <- function(df_list, ...) {
funcs <- rlang::quos(...)
result_tmp <- lapply(df_list, function(x) {
dplyr::summarize(x, !!!funcs)}
)
dplyr::bind_rows(result_tmp)
}
mtcars %>%
group_by_rollup(vs, am, vars = c("vs", "am", NA)) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
# 'grouped_rollup' 클래스에 대한 'summarize' 메소드를 생성합니다.
setMethod("summarize",
signature = "grouped_rollup",
definition = function(.Object, ...) {
summarize_rollup(.Object@df_list, ...)
})
summarize_rollup <- function(df_list, ...) {
funcs <- rlang::quos(...)
result_tmp <- lapply(df_list, function(x) {
dplyr::summarize(x, !!!funcs)}
)
dplyr::bind_rows(result_tmp)
}
mtcars %>%
group_by_rollup(vs, am, vars = c("vs", "am", NA)) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
# group_by_rollup 함수를 수정하여 결과물이 'grouped_rollup' 클래스를 가지도록 합니다.
rollup <- function(df, vars) {
group_vars <- dplyr::group_vars(df)
dfs <- list(df)
for (var in vars) {
if (is.na(var)) {
df_rollup <- df %>% dplyr::ungroup()
} else {
df_rollup <- df %>% dplyr::group_by_at(setdiff(group_vars, as.character(var)))
}
dfs <- append(dfs, list(df_rollup))
}
new("grouped_rollup", df_list = dfs)
}
mtcars %>%
group_by(vs,am) %>% rollup(vs, am, vars = c("vs", "am", NA)) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
# 클래스를 생성합니다.
setClass("grouped_rollup", representation(df_list = "list"))
# group_by_rollup 함수를 수정하여 결과물이 'grouped_rollup' 클래스를 가지도록 합니다.
rollup <- function(df, vars) {
group_vars <- dplyr::group_vars(df)
dfs <- list(df)
for (var in vars) {
if (is.na(var)) {
df_rollup <- df %>% dplyr::ungroup()
} else {
df_rollup <- df %>% dplyr::group_by_at(setdiff(group_vars, as.character(var)))
}
dfs <- append(dfs, list(df_rollup))
}
new("grouped_rollup", df_list = dfs)
}
# `summarize` generic을 설정합니다.
setGeneric("summarize",
function(.Object, ...) {
standardGeneric("summarize")
})
# 'grouped_rollup' 클래스에 대한 'summarize' 메소드를 생성합니다.
setMethod("summarize",
signature = "grouped_rollup",
definition = function(.Object, ...) {
summarize_rollup(.Object@df_list, ...)
})
summarize_rollup <- function(df_list, ...) {
funcs <- rlang::quos(...)
result_tmp <- lapply(df_list, function(x) {
dplyr::summarize(x, !!!funcs)}
)
dplyr::bind_rows(result_tmp)
}
mtcars %>%
group_by(vs,am) %>% rollup(vs, am, vars = c("vs", "am", NA)) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
# group_by_rollup 함수를 수정하여 결과물이 'grouped_rollup' 클래스를 가지도록 합니다.
rollup <- function(df, vars) {
group_vars <- dplyr::group_vars(df)
dfs <- list(df)
for (var in vars) {
if (is.na(var)) {
df_rollup <- df %>% dplyr::ungroup()
} else {
df_rollup <- df %>% dplyr::group_by_at(setdiff(group_vars, as.character(var)))
}
dfs <- append(dfs, list(df_rollup))
}
new("grouped_rollup", df_list = dfs)
}
# `summarize` generic을 설정합니다.
setGeneric("summarize",
function(.Object, ...) {
standardGeneric("summarize")
})
# 'grouped_rollup' 클래스에 대한 'summarize' 메소드를 생성합니다.
setMethod("summarize",
signature = "grouped_rollup",
definition = function(.Object, ...) {
summarize_rollup(.Object@df_list, ...)
})
summarize_rollup <- function(df_list, ...) {
funcs <- rlang::quos(...)
result_tmp <- lapply(df_list, function(x) {
dplyr::summarize(x, !!!funcs)}
)
dplyr::bind_rows(result_tmp)
}
mtcars %>%
group_by(vs,am) %>% rollup(vs, am, vars = c("vs", "am", NA)) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
mtcars %>%
group_by(vs,am) %>% rollup(vars = c("vs", "am", NA)) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
# group_by_rollup 함수를 수정하여 결과물이 'grouped_rollup' 클래스를 가지도록 합니다.
rollup <- function(df, vars) {
group_vars <- dplyr::group_vars(df)
dfs <- list(df)
for (var in vars) {
if (is.na(var)) {
df_rollup <- df %>% dplyr::ungroup()
} else {
df_rollup <- df %>% dplyr::group_by_at(setdiff(group_vars, as.character(var)))
}
dfs <- append(dfs, list(df_rollup))
}
new("grouped_rollup", df_list = dfs)
}
# `summarize` generic을 설정합니다.
setGeneric("summarize",
function(.Object, ...) {
standardGeneric("summarize")
})
# 'grouped_rollup' 클래스에 대한 'summarize' 메소드를 생성합니다.
setMethod("summarize",
signature = "grouped_rollup",
definition = function(.Object, ...) {
summarize_rollup(.Object@df_list, ...)
})
summarize_rollup <- function(df_list, ...) {
funcs <- rlang::quos(...)
result_tmp <- lapply(df_list, function(x) {
dplyr::summarize(x, !!!funcs)}
)
dplyr::bind_rows(result_tmp)
}
mtcars %>%
group_by(vs,am) %>% rollup(vars = c("vs", "am", NA)) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
mtcars %>%
group_by(vs,am) %>% rollup(vars = c(NA)) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
mtcars %>%
group_by(vs,am) %>% rollup(vars = c("vs")) %>%
summarize(avg_mpg = mean(mpg, na.rm = TRUE),
avg_cyl = mean(cyl, na.rm = TRUE),
avg_disp = mean(disp, na.rm = TRUE))
library(devtools)
devtools::install_github("JuYoungAhn/rollup")
devtools::install_github("JuYoungAhn/rollup")
library(rollup)
help(grouping_sets)
mtcars %>% group_by(vs) %>% with_rollup() %>% summarize(avg_mpg = mean(mpg, na.rm=T))
library(tidyverse)
mtcars %>% group_by(vs) %>% with_rollup() %>% summarize(avg_mpg = mean(mpg, na.rm=T))
mtcars %>% group_by(vs) %>% with_rollup() %>% summarize(avg_mpg = mean(mpg, na.rm=T))
devtools::install_github("JuYoungAhn/rollup")
devtools::install_github("JuYoungAhn/rollup")
library(tidyverse)
library(ggpubr)
library(RColorBrewer)
data <- read_csv("Graph/data/creative_type_demo.csv")
data$imp_prop <- (data %>%
group_by(advertiser_name, category) %>%
summarise(imp_prop = imp/sum(imp)))$imp_prop
(data %>%
group_by(advertiser_name, category) %>%
summarise(x = sum(imp_prop*ctr), y=sum(click)/sum(imp)))
data <- data %>% select(advertiser_name, category, age, gender, imp, ctr)
data$age <- factor(data$age)
data$gender <- factor(data$gender)
data$category <- factor(data$category, levels = c("식품","의류","화장품","기타"))
data$성연령 <- paste0(data$gender, "-", data$age)
data <- data %>% group_by(advertiser_name, category) %>%
mutate(ctr_rank = order(order(ctr, decreasing=FALSE)))
data2 <- data %>% pivot_longer(c(imp, ctr, ctr_rank),
names_to = "cat", values_to = "value", names_repair = "unique")
data2$ad_cat <- paste0(data2$advertiser_name, "-", data2$category)
palette <- c(brewer.pal(5, "Reds"), brewer.pal(5, "Blues"))
data
ggplot(data, aes(x=성연령, y=category, fill=ctr_rank)) +
geom_tile(aes(x=성연령), alpha=0.8, show.legend = FALSE) +
facet_grid(~advertiser_name, scales="free") +
labs(x=NULL,y=NULL) +
theme_bw(base_size = 30, base_family = "Kakao Regular") +
theme(legend.position = NULL,
plot.title = element_text(hjust = 0.5, size=30),
axis.text.x = element_text(size=20),
axis.ticks.y = element_blank(),
legend.text=element_text(size=15),
legend.title=element_text(size=15),
panel.grid = element_blank(),
panel.grid.minor = element_line(size = 0),
panel.grid.major = element_line(size = 0),
legend.margin = margin(t = -0.5, unit='cm'),
plot.background = element_rect(colour = "#cdcdcd",size = 0.5)) +
ggtitle("데모별 CTR 비교 (2020/11)") +
guides(colour = guide_legend(override.aes = list(size=7)),
shape = guide_legend(title = NULL, override.aes = list(size=7)),
fill = guide_legend(NULL)) +
scale_fill_gradient2(low = "blue", mid = "white",
high = "red") + coord_flip() +
geom_text(aes(label=paste0(round(ctr*100, 2), "%")), size=7)
library(pkgdoown)
library(pkgdown)
pkgdown::build_site()
pkgdown::build_site()
library(dplyr)
library(rollup)
data("web_service_data")
web_service_data %>% head
mtcars %>% group_by(vs, am) %>% grouping_sets("vs","am",c("vs","am"))
build_site()
library(pkgdown)
getwd()
setwd("rollup")
build_site()
mtcars %>% group_by(vs, am) %>% grouping_sets("vs","am",c("vs","am"), NA) %>% summarize(n=n(), avg_mpg=mean(mpg))
mtcars %>% group_by(vs, am) %>% with_rollup(n=n(), avg_mpg=mean(mpg))
mtcars %>% group_by(vs, am) %>% with_rollup() %>% summarize(n=n(), avg_mpg=mean(mpg))
mtcars %>% group_by(vs, am) %>% with_cube() %>% summarize(n=n(), avg_mpg=mean(mpg))
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
